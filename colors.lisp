(defparameter *colors* '((black 0)
			 (red 1)
			 (green 2)
			 (orange 3)
			 (blue 4)
			 (purple 5)
			 (teal 6)
			 (white 7)
			 (grey 8)
			 (dark-red 9)
			 (light-green 10)
			 (yellow 11)
			 (sky-blue 12)
			 (dark-purple 13)
			 (dark-teal 14)))

(defun calculate-color (r g b)
  (+ 16 (* r 36) (* g 6) b))

(defun get-rgb (color)
  (if (<= 16 color 231)
      (let* ((r (floor (/ (- color 16) 36)))
	     (g (floor (/ (- color 16 (* r 36)) 6)))
	     (b (- color 16 (* r 36) (* g 6))))
	(list r g b))
      '(0 0 0)))

(defun darken (color &optional (weight 1/6))
  (cond ((<= 16 color 231)
	 (let ((rgb (get-rgb color)))
	   (apply #'calculate-color
		  (mapcar (lambda (value) (max 0 (round (- value (* weight 6))))) rgb))))
	((> color 232)
	 (max 232 (- color (round (lerp 0 (- color 232) weight)))))
	(t color)))

(labels ((color-name (color number)
	   (read-from-string (format nil "~a-~d" color number)))
	 (add-color (name number)
	   (push (list name number) *colors*)))
  (loop for x from 1 to 5
	do (add-color (color-name 'red (1- x))
		      (calculate-color x 0 0))
	do (add-color (color-name 'blue (1- x))
		      (calculate-color 0 0 x))
	do (add-color (color-name 'green (1- x))
		      (calculate-color 0 x 0))
	do (add-color (color-name 'purple (1- x))
		      (calculate-color x 0 x))
	do (add-color (color-name 'yellow (1- x))
		      (calculate-color x x 0))
	do (add-color (color-name 'cyan (1- x))
		      (calculate-color 0 x x)))
  (loop for x from 232 to 255
	unless (= x 235) ;; same color as terminal background and color code 0
	  do (add-color (color-name 'grey (- x 232)) x)))

(defun print-colors ()
  (flet ((get-color-name (&rest vals)
	   (format nil "~{~d~^.~}" vals)))
    (let ((color-list nil))
      (mapc (lambda (val)
	      (push (cons (cadr val) (car val)) color-list))
	    *colors*)
      (loop for r below 6
	    do (loop for g below 6
		     do (loop for b below 6
			      unless (assoc (calculate-color r g b) color-list)
				do (push (cons (calculate-color r g b)
					       (get-color-name r g b))
					 color-list))))
      (column-print (mapcar (lambda (val)
			      (apply-color (cdr val) (car val)))
			    (sort color-list (lambda (a b)
					       (< (car a) (car b)))))
		    :fit-screen t))))
